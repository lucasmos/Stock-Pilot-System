{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/product-image-generation.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A product image generation AI agent.\n *\n * - generateProductImage - A function that handles the product image generation process.\n * - GenerateProductImageInput - The input type for the generateProductImage function.\n * - GenerateProductImageOutput - The return type for the generateProductImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateProductImageInputSchema = z.object({\n  productName: z.string().describe('The name of the product to generate an image for.'),\n});\nexport type GenerateProductImageInput = z.infer<typeof GenerateProductImageInputSchema>;\n\nconst GenerateProductImageOutputSchema = z.object({\n  imageUrl: z.string().describe('The URL of the generated image.'),\n});\nexport type GenerateProductImageOutput = z.infer<typeof GenerateProductImageOutputSchema>;\n\nexport async function generateProductImage(input: GenerateProductImageInput): Promise<GenerateProductImageOutput> {\n  return generateProductImageFlow(input);\n}\n\nconst generateProductImageFlow = ai.defineFlow(\n  {\n    name: 'generateProductImageFlow',\n    inputSchema: GenerateProductImageInputSchema,\n    outputSchema: GenerateProductImageOutputSchema,\n  },\n  async input => {\n    const {media} = await ai.generate({\n      // IMPORTANT: ONLY the googleai/gemini-2.0-flash-exp model is able to generate images. You MUST use exactly this model to generate images.\n      model: 'googleai/gemini-2.0-flash-exp',\n\n      prompt: `Generate an image of a ${input.productName}`,\n\n      config: {\n        responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work\n      },\n    });\n\n    return {\n      imageUrl: media.url,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAChC,0IAA0I;QAC1I,OAAO;QAEP,QAAQ,CAAC,uBAAuB,EAAE,MAAM,WAAW,EAAE;QAErD,QAAQ;YACN,oBAAoB;gBAAC;gBAAQ;aAAQ;QACvC;IACF;IAEA,OAAO;QACL,UAAU,MAAM,GAAG;IACrB;AACF;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["import type { Product, Sale, Purchase, User, Customer } from '@/lib/types';\n\nexport const mockProducts: Product[] = [\n  {\n    id: 'prod_1',\n    name: 'Dell XPS 13 Laptop',\n    description: 'Powerful and compact 13-inch laptop.',\n    price: 1299.99,\n    quantityInStock: 25,\n    category: 'Laptops',\n    supplier: 'Dell Inc.',\n    imageUrl: 'https://picsum.photos/seed/xps13/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_2',\n    name: 'Logitech MX Master 3S Mouse',\n    description: 'Advanced wireless mouse for productivity.',\n    price: 99.99,\n    quantityInStock: 50,\n    category: 'Accessories',\n    supplier: 'Logitech',\n    imageUrl: 'https://picsum.photos/seed/mxmaster3s/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_3',\n    name: 'Samsung 27\" Odyssey G5 Monitor',\n    description: 'QHD 144Hz gaming monitor.',\n    price: 349.99,\n    quantityInStock: 15,\n    category: 'Monitors',\n    supplier: 'Samsung Electronics',\n    imageUrl: 'https://picsum.photos/seed/odysseyg5/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_4',\n    name: 'Intel Core i7-13700K CPU',\n    description: 'High-performance desktop processor.',\n    price: 409.00,\n    quantityInStock: 30,\n    category: 'Components',\n    supplier: 'Intel Corporation',\n    imageUrl: 'https://picsum.photos/seed/i7cpu/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\nexport const mockSales: Sale[] = [\n  {\n    id: 'sale_1',\n    items: [\n      { productId: 'prod_2', productName: 'Logitech MX Master 3S Mouse', quantity: 1, unitPrice: 99.99, totalPrice: 99.99 },\n      { productId: 'prod_3', productName: 'Samsung 27\" Odyssey G5 Monitor', quantity: 1, unitPrice: 349.99, totalPrice: 349.99 },\n    ],\n    totalAmount: 449.98,\n    paymentMethod: 'mpesa',\n    paymentStatus: 'paid',\n    transactionId: 'MPESA_TXN_123',\n    createdAt: new Date(Date.now() - 86400000 * 2).toISOString(), // 2 days ago\n  },\n  {\n    id: 'sale_2',\n    items: [{ productId: 'prod_1', productName: 'Dell XPS 13 Laptop', quantity: 1, unitPrice: 1299.99, totalPrice: 1299.99 }],\n    totalAmount: 1299.99,\n    paymentMethod: 'cash',\n    paymentStatus: 'paid',\n    createdAt: new Date(Date.now() - 86400000 * 5).toISOString(), // 5 days ago\n  },\n];\n\nexport const mockPurchases: Purchase[] = [\n  {\n    id: 'pur_1',\n    items: [{ productName: 'Dell XPS 13 Laptop', quantity: 10, unitCost: 1000.00, totalCost: 10000.00 }],\n    supplier: 'Dell Inc.',\n    totalCost: 10000.00,\n    purchaseDate: new Date(Date.now() - 86400000 * 7).toISOString(), // 7 days ago\n    createdAt: new Date(Date.now() - 86400000 * 7).toISOString(),\n  },\n  {\n    id: 'pur_2',\n    items: [{ productName: 'Logitech MX Master 3S Mouse', quantity: 20, unitCost: 70.00, totalCost: 1400.00 }],\n    supplier: 'Logitech Distributor',\n    totalCost: 1400.00,\n    purchaseDate: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\n    createdAt: new Date(Date.now() - 86400000 * 3).toISOString(),\n  },\n];\n\nexport const mockUsers: User[] = [\n    { id: 'user_1', name: 'Admin User', email: 'admin@stockpilot.com', role: 'admin', createdAt: new Date().toISOString() },\n    { id: 'user_2', name: 'Staff User', email: 'staff@stockpilot.com', role: 'staff', createdAt: new Date().toISOString() },\n];\n\nexport const mockCustomers: Customer[] = [\n    { id: 'cust_1', name: 'John Doe', email: 'john.doe@example.com', phoneNumber: '254712345678', createdAt: new Date().toISOString() },\n];\n\n// Helper function to get a product by ID (simulates database lookup)\nexport const getProductById = (id: string): Product | undefined => mockProducts.find(p => p.id === id);\n"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,eAA0B;IACrC;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;CACD;AAEM,MAAM,YAAoB;IAC/B;QACE,IAAI;QACJ,OAAO;YACL;gBAAE,WAAW;gBAAU,aAAa;gBAA+B,UAAU;gBAAG,WAAW;gBAAO,YAAY;YAAM;YACpH;gBAAE,WAAW;gBAAU,aAAa;gBAAkC,UAAU;gBAAG,WAAW;gBAAQ,YAAY;YAAO;SAC1H;QACD,aAAa;QACb,eAAe;QACf,eAAe;QACf,eAAe;QACf,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;IACA;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,WAAW;gBAAU,aAAa;gBAAsB,UAAU;gBAAG,WAAW;gBAAS,YAAY;YAAQ;SAAE;QACzH,aAAa;QACb,eAAe;QACf,eAAe;QACf,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;CACD;AAEM,MAAM,gBAA4B;IACvC;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,aAAa;gBAAsB,UAAU;gBAAI,UAAU;gBAAS,WAAW;YAAS;SAAE;QACpG,UAAU;QACV,WAAW;QACX,cAAc,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;QAC7D,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;IACA;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,aAAa;gBAA+B,UAAU;gBAAI,UAAU;gBAAO,WAAW;YAAQ;SAAE;QAC1G,UAAU;QACV,WAAW;QACX,cAAc,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;QAC7D,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;CACD;AAEM,MAAM,YAAoB;IAC7B;QAAE,IAAI;QAAU,MAAM;QAAc,OAAO;QAAwB,MAAM;QAAS,WAAW,IAAI,OAAO,WAAW;IAAG;IACtH;QAAE,IAAI;QAAU,MAAM;QAAc,OAAO;QAAwB,MAAM;QAAS,WAAW,IAAI,OAAO,WAAW;IAAG;CACzH;AAEM,MAAM,gBAA4B;IACrC;QAAE,IAAI;QAAU,MAAM;QAAY,OAAO;QAAwB,aAAa;QAAgB,WAAW,IAAI,OAAO,WAAW;IAAG;CACrI;AAGM,MAAM,iBAAiB,CAAC,KAAoC,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/safaricom.ts"],"sourcesContent":["/**\n * Represents the response from an STK push request.\n */\nexport interface StkPushResponse {\n  /**\n   * The Merchant Request ID.\n   */\n  MerchantRequestID: string;\n  /**\n   * The Checkout Request ID.\n   */\n  CheckoutRequestID: string;\n  /**\n   * The Response Code.\n   */\n  ResponseCode: string;\n  /**\n   * The Response Description.\n   */\n  ResponseDescription: string;\n  /**\n   * The Customer Message.\n   */\n  CustomerMessage: string;\n}\n\n/**\n * Initiates an STK push request to the Safaricom Daraja API.\n *\n * @param phoneNumber The phone number to send the STK push to.\n * @param amount The amount to charge.\n * @param accountReference The account reference.\n * @returns A promise that resolves to an StkPushResponse object.\n */\nexport async function initiateStkPush(\n  phoneNumber: string,\n  amount: number,\n  accountReference: string\n): Promise<StkPushResponse> {\n  // TODO: Implement this by calling the Safaricom Daraja API.\n\n  return {\n    MerchantRequestID: 'ws_CO_290720241438208829',\n    CheckoutRequestID: 'CheckoutRequestID',\n    ResponseCode: '0',\n    ResponseDescription: 'Success',\n    CustomerMessage: 'Success',\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAgCM,eAAe,gBACpB,WAAmB,EACnB,MAAc,EACd,gBAAwB;IAExB,4DAA4D;IAE5D,OAAO;QACL,mBAAmB;QACnB,mBAAmB;QACnB,cAAc;QACd,qBAAqB;QACrB,iBAAiB;IACnB;AACF","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/airtel-money.ts"],"sourcesContent":["/**\n * Represents the response from an Airtel Money transaction request.\n */\nexport interface AirtelMoneyResponse {\n  /**\n   * The transaction ID.\n   */\n  transactionId: string;\n  /**\n   * The status of the transaction.\n   */\n  status: string;\n  /**\n   * The message associated with the transaction.\n   */\n  message: string;\n}\n\n/**\n * Initiates an Airtel Money transaction.\n *\n * @param phoneNumber The phone number to send the transaction request to.\n * @param amount The amount to charge.\n * @param referenceId The reference ID for the transaction.\n * @returns A promise that resolves to an AirtelMoneyResponse object.\n */\nexport async function initiateAirtelMoneyTransaction(\n  phoneNumber: string,\n  amount: number,\n  referenceId: string\n): Promise<AirtelMoneyResponse> {\n  // TODO: Implement this by calling the Airtel Money API.\n\n  return {\n    transactionId: '54654',\n    status: 'COMPLETED',\n    message: 'Transaction completed successfully',\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAwBM,eAAe,+BACpB,WAAmB,EACnB,MAAc,EACd,WAAmB;IAEnB,wDAAwD;IAExD,OAAO;QACL,eAAe;QACf,QAAQ;QACR,SAAS;IACX;AACF","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { generateProductImage as generateProductImageFlow, type GenerateProductImageInput } from '@/ai/flows/product-image-generation';\nimport type { Product, Sale, Purchase } from './types';\nimport { mockProducts, mockSales, mockPurchases } from './data'; // For simulating data ops\nimport { initiateStkPush } from '@/services/safaricom';\nimport { initiateAirtelMoneyTransaction } from '@/services/airtel-money';\n\n// Schema for adding a product\nconst AddProductSchema = z.object({\n  name: z.string().min(3, \"Product name must be at least 3 characters\"),\n  description: z.string().optional(),\n  price: z.coerce.number().positive(\"Price must be a positive number\"),\n  quantityInStock: z.coerce.number().int().nonnegative(\"Quantity must be a non-negative integer\"),\n  category: z.string().optional(),\n  supplier: z.string().optional(),\n  imageUrl: z.string().url(\"Invalid image URL\").optional(),\n});\n\nexport async function addProduct(formData: FormData) {\n  const validatedFields = AddProductSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return {\n      error: \"Invalid fields\",\n      details: validatedFields.error.flatten().fieldErrors,\n    };\n  }\n  \n  const newProduct: Product = {\n    id: `prod_${Date.now()}`,\n    ...validatedFields.data,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n\n  // Simulate adding to a database\n  mockProducts.push(newProduct);\n  console.log(\"Added new product:\", newProduct);\n\n  return { success: \"Product added successfully!\", product: newProduct };\n}\n\nexport async function getProducts(): Promise<Product[]> {\n  // Simulate fetching from a database\n  return Promise.resolve(mockProducts);\n}\n\nexport async function getSales(dateRange?: { from: Date, to: Date }): Promise<Sale[]> {\n  // Simulate fetching and filtering sales\n  console.log(\"Fetching sales, date range:\", dateRange);\n  return Promise.resolve(mockSales);\n}\n\nexport async function getPurchases(dateRange?: { from: Date, to: Date }): Promise<Purchase[]> {\n  // Simulate fetching and filtering purchases\n  console.log(\"Fetching purchases, date range:\", dateRange);\n  return Promise.resolve(mockPurchases);\n}\n\nexport async function generateProductImage(input: GenerateProductImageInput): Promise<{ imageUrl?: string; error?: string }> {\n  try {\n    console.log(\"Generating product image for:\", input.productName);\n    // In a real app, ensure API keys for Genkit are set up on the server\n    const result = await generateProductImageFlow(input);\n    return { imageUrl: result.imageUrl };\n  } catch (error) {\n    console.error(\"Error generating product image:\", error);\n    return { error: \"Failed to generate product image.\" };\n  }\n}\n\n\nexport async function processMpesaPayment(phoneNumber: string, amount: number, orderId: string) {\n  try {\n    const response = await initiateStkPush(phoneNumber, amount, orderId);\n    // Handle response - typically you'd store CheckoutRequestID and wait for a callback\n    if (response.ResponseCode === \"0\") {\n      return { success: true, message: response.CustomerMessage, checkoutRequestId: response.CheckoutRequestID };\n    }\n    return { success: false, message: response.ResponseDescription || \"MPESA STK push failed.\" };\n  } catch (error) {\n    console.error(\"MPESA Payment Error:\", error);\n    return { success: false, message: \"An error occurred during MPESA payment processing.\" };\n  }\n}\n\nexport async function processAirtelMoneyPayment(phoneNumber: string, amount: number, orderId: string) {\n  try {\n    const response = await initiateAirtelMoneyTransaction(phoneNumber, amount, orderId);\n    // Handle response\n    if (response.status === \"COMPLETED\" || response.status === \"SUCCESS\") { // Adjust based on actual API success status\n      return { success: true, message: response.message, transactionId: response.transactionId };\n    }\n    return { success: false, message: response.message || \"Airtel Money transaction failed.\" };\n  } catch (error) {\n    console.error(\"Airtel Money Payment Error:\", error);\n    return { success: false, message: \"An error occurred during Airtel Money payment processing.\" };\n  }\n}\n\nexport async function recordSale(saleData: Omit<Sale, 'id' | 'createdAt'>) {\n  const newSale: Sale = {\n    id: `sale_${Date.now()}`,\n    ...saleData,\n    createdAt: new Date().toISOString(),\n  };\n  mockSales.push(newSale);\n  console.log(\"Recorded new sale:\", newSale);\n  // Deduct stock (simplified)\n  for (const item of newSale.items) {\n    const product = mockProducts.find(p => p.id === item.productId);\n    if (product) {\n      product.quantityInStock -= item.quantity;\n    }\n  }\n  return { success: \"Sale recorded successfully!\", sale: newSale };\n}\n\n// Placeholder for other actions\nexport async function updateProduct(productId: string, formData: FormData) { console.log(productId, formData); return { success: \"Not implemented\" }; }\nexport async function deleteProduct(productId: string) { console.log(productId); return { success: \"Not implemented\" }; }\nexport async function recordPurchase(purchaseData: Omit<Purchase, 'id' | 'createdAt'>) { console.log(purchaseData); return { success: \"Not implemented\" }; }\nexport async function getUsers() { return []; }\nexport async function addUser(userData: any) { console.log(userData); return { success: \"Not implemented\" }; }\nexport async function updateUserRole(userId: string, newRole: any) { console.log(userId, newRole); return { success: \"Not implemented\" }; }\nexport async function deleteUser(userId: string) { console.log(userId); return { success: \"Not implemented\" }; }\nexport async function generateMonthlyReport(month: number, year: number) { console.log(month, year); return { success: \"Not implemented\" }; }\nexport async function loginAdmin(formData: FormData) { console.log(formData); return { success: \"Not implemented, redirecting...\", redirect: \"/admin/dashboard\" }; }\nexport async function registerCustomer(formData: FormData) { console.log(formData); return { success: \"Not implemented\" }; }\nexport async function loginCustomer(formData: FormData) { console.log(formData); return { success: \"Not implemented, redirecting...\", redirect: \"/products\" }; }\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 885, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/epos/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/epos/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/epos/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 899, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/epos/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/epos/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/epos/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 913, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}