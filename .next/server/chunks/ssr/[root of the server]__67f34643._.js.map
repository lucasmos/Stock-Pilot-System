{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/product-image-generation.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A product image generation AI agent.\n *\n * - generateProductImage - A function that handles the product image generation process.\n * - GenerateProductImageInput - The input type for the generateProductImage function.\n * - GenerateProductImageOutput - The return type for the generateProductImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateProductImageInputSchema = z.object({\n  productName: z.string().describe('The name of the product to generate an image for.'),\n});\nexport type GenerateProductImageInput = z.infer<typeof GenerateProductImageInputSchema>;\n\nconst GenerateProductImageOutputSchema = z.object({\n  imageUrl: z.string().describe('The URL of the generated image.'),\n});\nexport type GenerateProductImageOutput = z.infer<typeof GenerateProductImageOutputSchema>;\n\nexport async function generateProductImage(input: GenerateProductImageInput): Promise<GenerateProductImageOutput> {\n  return generateProductImageFlow(input);\n}\n\nconst generateProductImageFlow = ai.defineFlow(\n  {\n    name: 'generateProductImageFlow',\n    inputSchema: GenerateProductImageInputSchema,\n    outputSchema: GenerateProductImageOutputSchema,\n  },\n  async input => {\n    const {media} = await ai.generate({\n      // IMPORTANT: ONLY the googleai/gemini-2.0-flash-exp model is able to generate images. You MUST use exactly this model to generate images.\n      model: 'googleai/gemini-2.0-flash-exp',\n\n      prompt: `Generate an image of a ${input.productName}`,\n\n      config: {\n        responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work\n      },\n    });\n\n    return {\n      imageUrl: media.url,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAChC,0IAA0I;QAC1I,OAAO;QAEP,QAAQ,CAAC,uBAAuB,EAAE,MAAM,WAAW,EAAE;QAErD,QAAQ;YACN,oBAAoB;gBAAC;gBAAQ;aAAQ;QACvC;IACF;IAEA,OAAO;QACL,UAAU,MAAM,GAAG;IACrB;AACF;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["import type { Product, Sale, Purchase, User, Customer } from '@/lib/types';\n\nexport const mockProducts: Product[] = [\n  {\n    id: 'prod_1',\n    name: 'Dell XPS 13 Laptop',\n    description: 'Powerful and compact 13-inch laptop.',\n    price: 1299.99,\n    quantityInStock: 25,\n    category: 'Laptops',\n    supplier: 'Dell Inc.',\n    imageUrl: 'https://picsum.photos/seed/xps13/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_2',\n    name: 'Logitech MX Master 3S Mouse',\n    description: 'Advanced wireless mouse for productivity.',\n    price: 99.99,\n    quantityInStock: 50,\n    category: 'Accessories',\n    supplier: 'Logitech',\n    imageUrl: 'https://picsum.photos/seed/mxmaster3s/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_3',\n    name: 'Samsung 27\" Odyssey G5 Monitor',\n    description: 'QHD 144Hz gaming monitor.',\n    price: 349.99,\n    quantityInStock: 15,\n    category: 'Monitors',\n    supplier: 'Samsung Electronics',\n    imageUrl: 'https://picsum.photos/seed/odysseyg5/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'prod_4',\n    name: 'Intel Core i7-13700K CPU',\n    description: 'High-performance desktop processor.',\n    price: 409.00,\n    quantityInStock: 30,\n    category: 'Components',\n    supplier: 'Intel Corporation',\n    imageUrl: 'https://picsum.photos/seed/i7cpu/400/300',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\nexport const mockSales: Sale[] = [\n  {\n    id: 'sale_1',\n    items: [\n      { productId: 'prod_2', productName: 'Logitech MX Master 3S Mouse', quantity: 1, unitPrice: 99.99, totalPrice: 99.99 },\n      { productId: 'prod_3', productName: 'Samsung 27\" Odyssey G5 Monitor', quantity: 1, unitPrice: 349.99, totalPrice: 349.99 },\n    ],\n    totalAmount: 449.98,\n    paymentMethod: 'mpesa',\n    paymentStatus: 'paid',\n    transactionId: 'MPESA_TXN_123',\n    createdAt: new Date(Date.now() - 86400000 * 2).toISOString(), // 2 days ago\n  },\n  {\n    id: 'sale_2',\n    items: [{ productId: 'prod_1', productName: 'Dell XPS 13 Laptop', quantity: 1, unitPrice: 1299.99, totalPrice: 1299.99 }],\n    totalAmount: 1299.99,\n    paymentMethod: 'cash',\n    paymentStatus: 'paid',\n    createdAt: new Date(Date.now() - 86400000 * 5).toISOString(), // 5 days ago\n  },\n];\n\nexport const mockPurchases: Purchase[] = [\n  {\n    id: 'pur_1',\n    items: [{ productName: 'Dell XPS 13 Laptop', quantity: 10, unitCost: 1000.00, totalCost: 10000.00 }],\n    supplier: 'Dell Inc.',\n    totalCost: 10000.00,\n    purchaseDate: new Date(Date.now() - 86400000 * 7).toISOString(), // 7 days ago\n    createdAt: new Date(Date.now() - 86400000 * 7).toISOString(),\n  },\n  {\n    id: 'pur_2',\n    items: [{ productName: 'Logitech MX Master 3S Mouse', quantity: 20, unitCost: 70.00, totalCost: 1400.00 }],\n    supplier: 'Logitech Distributor',\n    totalCost: 1400.00,\n    purchaseDate: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\n    createdAt: new Date(Date.now() - 86400000 * 3).toISOString(),\n  },\n];\n\nexport const mockUsers: User[] = [\n    { id: 'user_1', name: 'Admin User', email: 'admin@stockpilot.com', role: 'admin', createdAt: new Date().toISOString() },\n    { id: 'user_2', name: 'Staff User', email: 'staff@stockpilot.com', role: 'staff', createdAt: new Date().toISOString() },\n];\n\nexport const mockCustomers: Customer[] = [\n    { id: 'cust_1', name: 'John Doe', email: 'john.doe@example.com', phoneNumber: '254712345678', createdAt: new Date().toISOString() },\n];\n\n// Helper function to get a product by ID (simulates database lookup)\nexport const getProductById = (id: string): Product | undefined => mockProducts.find(p => p.id === id);\n"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,eAA0B;IACrC;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,UAAU;QACV,UAAU;QACV,UAAU;QACV,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;CACD;AAEM,MAAM,YAAoB;IAC/B;QACE,IAAI;QACJ,OAAO;YACL;gBAAE,WAAW;gBAAU,aAAa;gBAA+B,UAAU;gBAAG,WAAW;gBAAO,YAAY;YAAM;YACpH;gBAAE,WAAW;gBAAU,aAAa;gBAAkC,UAAU;gBAAG,WAAW;gBAAQ,YAAY;YAAO;SAC1H;QACD,aAAa;QACb,eAAe;QACf,eAAe;QACf,eAAe;QACf,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;IACA;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,WAAW;gBAAU,aAAa;gBAAsB,UAAU;gBAAG,WAAW;gBAAS,YAAY;YAAQ;SAAE;QACzH,aAAa;QACb,eAAe;QACf,eAAe;QACf,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;CACD;AAEM,MAAM,gBAA4B;IACvC;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,aAAa;gBAAsB,UAAU;gBAAI,UAAU;gBAAS,WAAW;YAAS;SAAE;QACpG,UAAU;QACV,WAAW;QACX,cAAc,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;QAC7D,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;IACA;QACE,IAAI;QACJ,OAAO;YAAC;gBAAE,aAAa;gBAA+B,UAAU;gBAAI,UAAU;gBAAO,WAAW;YAAQ;SAAE;QAC1G,UAAU;QACV,WAAW;QACX,cAAc,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;QAC7D,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW,GAAG,WAAW;IAC5D;CACD;AAEM,MAAM,YAAoB;IAC7B;QAAE,IAAI;QAAU,MAAM;QAAc,OAAO;QAAwB,MAAM;QAAS,WAAW,IAAI,OAAO,WAAW;IAAG;IACtH;QAAE,IAAI;QAAU,MAAM;QAAc,OAAO;QAAwB,MAAM;QAAS,WAAW,IAAI,OAAO,WAAW;IAAG;CACzH;AAEM,MAAM,gBAA4B;IACrC;QAAE,IAAI;QAAU,MAAM;QAAY,OAAO;QAAwB,aAAa;QAAgB,WAAW,IAAI,OAAO,WAAW;IAAG;CACrI;AAGM,MAAM,iBAAiB,CAAC,KAAoC,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/safaricom.ts"],"sourcesContent":["/**\n * Represents the response from an STK push request.\n */\nexport interface StkPushResponse {\n  /**\n   * The Merchant Request ID.\n   */\n  MerchantRequestID: string;\n  /**\n   * The Checkout Request ID.\n   */\n  CheckoutRequestID: string;\n  /**\n   * The Response Code.\n   */\n  ResponseCode: string;\n  /**\n   * The Response Description.\n   */\n  ResponseDescription: string;\n  /**\n   * The Customer Message.\n   */\n  CustomerMessage: string;\n}\n\n/**\n * Initiates an STK push request to the Safaricom Daraja API.\n *\n * @param phoneNumber The phone number to send the STK push to.\n * @param amount The amount to charge.\n * @param accountReference The account reference.\n * @returns A promise that resolves to an StkPushResponse object.\n */\nexport async function initiateStkPush(\n  phoneNumber: string,\n  amount: number,\n  accountReference: string\n): Promise<StkPushResponse> {\n  // TODO: Implement this by calling the Safaricom Daraja API.\n\n  return {\n    MerchantRequestID: 'ws_CO_290720241438208829',\n    CheckoutRequestID: 'CheckoutRequestID',\n    ResponseCode: '0',\n    ResponseDescription: 'Success',\n    CustomerMessage: 'Success',\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAgCM,eAAe,gBACpB,WAAmB,EACnB,MAAc,EACd,gBAAwB;IAExB,4DAA4D;IAE5D,OAAO;QACL,mBAAmB;QACnB,mBAAmB;QACnB,cAAc;QACd,qBAAqB;QACrB,iBAAiB;IACnB;AACF","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/airtel-money.ts"],"sourcesContent":["/**\n * Represents the response from an Airtel Money transaction request.\n */\nexport interface AirtelMoneyResponse {\n  /**\n   * The transaction ID.\n   */\n  transactionId: string;\n  /**\n   * The status of the transaction.\n   */\n  status: string;\n  /**\n   * The message associated with the transaction.\n   */\n  message: string;\n}\n\n/**\n * Initiates an Airtel Money transaction.\n *\n * @param phoneNumber The phone number to send the transaction request to.\n * @param amount The amount to charge.\n * @param referenceId The reference ID for the transaction.\n * @returns A promise that resolves to an AirtelMoneyResponse object.\n */\nexport async function initiateAirtelMoneyTransaction(\n  phoneNumber: string,\n  amount: number,\n  referenceId: string\n): Promise<AirtelMoneyResponse> {\n  // TODO: Implement this by calling the Airtel Money API.\n\n  return {\n    transactionId: '54654',\n    status: 'COMPLETED',\n    message: 'Transaction completed successfully',\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAwBM,eAAe,+BACpB,WAAmB,EACnB,MAAc,EACd,WAAmB;IAEnB,wDAAwD;IAExD,OAAO;QACL,eAAe;QACf,QAAQ;QACR,SAAS;IACX;AACF","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { generateProductImage as generateProductImageFlow, type GenerateProductImageInput } from '@/ai/flows/product-image-generation';\nimport type { Product, Sale, Purchase, User, UserRole } from './types';\nimport { mockProducts, mockSales, mockPurchases, mockUsers } from './data'; // For simulating data ops\nimport { initiateStkPush } from '@/services/safaricom';\nimport { initiateAirtelMoneyTransaction } from '@/services/airtel-money';\n\n// Schema for adding a product\nconst AddProductSchema = z.object({\n  name: z.string().min(3, \"Product name must be at least 3 characters\"),\n  description: z.string().optional(),\n  price: z.coerce.number().positive(\"Price must be a positive number\"),\n  quantityInStock: z.coerce.number().int().nonnegative(\"Quantity must be a non-negative integer\"),\n  category: z.string().optional(),\n  supplier: z.string().optional(),\n  imageUrl: z.string().url(\"Invalid image URL\").optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const rawData = Object.fromEntries(formData.entries());\n  const validatedFields = AddProductSchema.safeParse(rawData);\n\n  if (!validatedFields.success) {\n    console.error(\"Validation errors:\", validatedFields.error.flatten().fieldErrors);\n    return {\n      error: \"Invalid fields. Please check the data and try again.\",\n      details: validatedFields.error.flatten().fieldErrors,\n    };\n  }\n  \n  const newProductData = validatedFields.data;\n  if (newProductData.imageUrl === '') {\n    delete newProductData.imageUrl; // Remove if empty string so it becomes undefined\n  }\n\n  const newProduct: Product = {\n    id: `prod_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`, // More unique ID\n    ...newProductData,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n\n  mockProducts.unshift(newProduct); // Add to the beginning for visibility\n  console.log(\"Added new product:\", newProduct);\n\n  return { success: \"Product added successfully!\", product: newProduct };\n}\n\nexport async function addProductsFromExcel(formData: FormData) {\n  const file = formData.get('excelFile') as File;\n\n  if (!file) {\n    return { error: \"No Excel file provided.\" };\n  }\n\n  console.log(\"Received Excel file:\", file.name, \"Size:\", file.size);\n\n  // ** SIMULATION ONLY **\n  // In a real application, you would use a library like 'xlsx' or 'SheetJS' here to:\n  // 1. Read the file buffer: `await file.arrayBuffer()`\n  // 2. Parse the Excel data from the buffer.\n  // 3. Iterate over rows and validate each product using AddProductSchema.\n  // 4. Collect valid products and any errors.\n\n  // For demonstration, let's simulate adding a couple of products\n  const simulatedParsedProducts = [\n    { name: \"Excel Product A\", price: 19.99, quantityInStock: 150, category: \"Excel Uploads\", description: \"Added via Excel\" },\n    { name: \"Excel Product B\", price: 29.99, quantityInStock: 75, category: \"Excel Uploads\", description: \"Another one via Excel\" },\n  ];\n\n  let addedCount = 0;\n  for (const prodData of simulatedParsedProducts) {\n    const validatedFields = AddProductSchema.safeParse(prodData);\n    if (validatedFields.success) {\n      const newProduct: Product = {\n        id: `prod_excel_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`,\n        ...validatedFields.data,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      mockProducts.unshift(newProduct);\n      addedCount++;\n    } else {\n      console.warn(\"Skipping invalid product from Excel (simulated):\", prodData, validatedFields.error.flatten().fieldErrors);\n    }\n  }\n\n  if (addedCount > 0) {\n    return { success: true, message: `Successfully processed Excel file. ${addedCount} products added (simulated). Actual Excel parsing requires a library.` };\n  } else {\n    return { error: \"No valid products found in Excel file (simulated). Actual Excel parsing requires a library.\" };\n  }\n}\n\n\nexport async function getProducts(): Promise<Product[]> {\n  await new Promise(resolve => setTimeout(resolve, 500)); // Simulate network delay\n  return Promise.resolve([...mockProducts]); // Return a copy to avoid direct mutation issues in components\n}\n\nexport async function getSales(dateRange?: { from: Date, to: Date }): Promise<Sale[]> {\n  console.log(\"Fetching sales, date range:\", dateRange);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  let filteredSales = [...mockSales];\n  if (dateRange?.from && dateRange?.to) {\n    const fromDate = new Date(dateRange.from).setHours(0,0,0,0);\n    const toDate = new Date(dateRange.to).setHours(23,59,59,999);\n    filteredSales = mockSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt).getTime();\n      return saleDate >= fromDate && saleDate <= toDate;\n    });\n  }\n  return Promise.resolve(filteredSales);\n}\n\nexport async function getPurchases(dateRange?: { from: Date, to: Date }): Promise<Purchase[]> {\n  console.log(\"Fetching purchases, date range:\", dateRange);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  let filteredPurchases = [...mockPurchases];\n   if (dateRange?.from && dateRange?.to) {\n    const fromDate = new Date(dateRange.from).setHours(0,0,0,0);\n    const toDate = new Date(dateRange.to).setHours(23,59,59,999);\n    filteredPurchases = mockPurchases.filter(purchase => {\n      const purchaseDateVal = new Date(purchase.purchaseDate).getTime();\n      return purchaseDateVal >= fromDate && purchaseDateVal <= toDate;\n    });\n  }\n  return Promise.resolve(filteredPurchases);\n}\n\nexport async function generateProductImage(input: GenerateProductImageInput): Promise<{ imageUrl?: string; error?: string }> {\n  try {\n    console.log(\"Generating product image for:\", input.productName);\n    const result = await generateProductImageFlow(input);\n    if (!result.imageUrl.startsWith('data:image')) {\n        // This can happen if the model doesn't return a valid image data URI.\n        console.error(\"Generated image URL is not a data URI:\", result.imageUrl);\n        return { error: \"Generated content is not a valid image. Try a different product name.\"};\n    }\n    return { imageUrl: result.imageUrl };\n  } catch (error: any) {\n    console.error(\"Error generating product image:\", error);\n    const errorMessage = error.message || \"Failed to generate product image due to an unexpected error.\";\n    if (error.cause && error.cause.message) { // Genkit often wraps errors\n        return { error: `Image generation failed: ${error.cause.message}` };\n    }\n    return { error: errorMessage };\n  }\n}\n\n\nexport async function processMpesaPayment(phoneNumber: string, amount: number, orderId: string) {\n  try {\n    const response = await initiateStkPush(phoneNumber, amount, orderId);\n    if (response.ResponseCode === \"0\") {\n      return { success: true, message: response.CustomerMessage, checkoutRequestId: response.CheckoutRequestID };\n    }\n    return { success: false, message: response.ResponseDescription || \"MPESA STK push failed.\" };\n  } catch (error) {\n    console.error(\"MPESA Payment Error:\", error);\n    return { success: false, message: \"An error occurred during MPESA payment processing.\" };\n  }\n}\n\nexport async function processAirtelMoneyPayment(phoneNumber: string, amount: number, orderId: string) {\n  try {\n    const response = await initiateAirtelMoneyTransaction(phoneNumber, amount, orderId);\n    if (response.status === \"COMPLETED\" || response.status === \"SUCCESS\") { \n      return { success: true, message: response.message, transactionId: response.transactionId };\n    }\n    return { success: false, message: response.message || \"Airtel Money transaction failed.\" };\n  } catch (error) {\n    console.error(\"Airtel Money Payment Error:\", error);\n    return { success: false, message: \"An error occurred during Airtel Money payment processing.\" };\n  }\n}\n\nexport async function recordSale(saleData: Omit<Sale, 'id' | 'createdAt'>) {\n  const newSale: Sale = {\n    id: `sale_${Date.now()}`,\n    ...saleData,\n    createdAt: new Date().toISOString(),\n  };\n  mockSales.unshift(newSale);\n  console.log(\"Recorded new sale:\", newSale);\n  for (const item of newSale.items) {\n    const productIndex = mockProducts.findIndex(p => p.id === item.productId);\n    if (productIndex !== -1) {\n      mockProducts[productIndex].quantityInStock -= item.quantity;\n    }\n  }\n  return { success: \"Sale recorded successfully!\", sale: newSale };\n}\n\nexport async function recordPurchase(purchaseData: Omit<Purchase, 'id' | 'createdAt' | 'purchaseDate'> & { purchaseDate?: string } ) {\n  const newPurchase: Purchase = {\n    id: `pur_${Date.now()}`,\n    ...purchaseData,\n    purchaseDate: purchaseData.purchaseDate || new Date().toISOString(), // Use provided or current date\n    createdAt: new Date().toISOString(),\n  };\n  mockPurchases.unshift(newPurchase);\n  console.log(\"Recorded new purchase:\", newPurchase);\n  // Optionally, update stock for purchased items\n  for (const item of newPurchase.items) {\n    const product = mockProducts.find(p => p.name.toLowerCase() === item.productName.toLowerCase()); // Match by name (could be improved)\n    if (product) {\n      product.quantityInStock += item.quantity;\n    } else {\n      // Optionally create a new product if it doesn't exist\n      const newProduct: Product = {\n        id: `prod_purch_${Date.now()}_${Math.random().toString(36).substring(2,7)}`,\n        name: item.productName,\n        price: item.unitCost * 1.25, // Example: set price with 25% markup\n        quantityInStock: item.quantity,\n        supplier: newPurchase.supplier,\n        category: \"Uncategorized\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      mockProducts.unshift(newProduct);\n    }\n  }\n  return { success: \"Purchase recorded successfully!\", purchase: newPurchase };\n}\n\n\nexport async function getUsers(): Promise<User[]> { \n  await new Promise(resolve => setTimeout(resolve, 300));\n  return Promise.resolve([...mockUsers]);\n}\n\nexport async function addUser(userData: Omit<User, 'id' | 'createdAt'>): Promise<{success: boolean, user?: User, error?: string}> {\n  console.log(\"Attempting to add user:\", userData);\n  if (!userData.email || !userData.name || !userData.role) {\n    return { success: false, error: \"Missing required user data.\" };\n  }\n  const newUser: User = {\n    id: `user_${Date.now()}`,\n    ...userData,\n    createdAt: new Date().toISOString(),\n  };\n  mockUsers.unshift(newUser);\n  return { success: true, user: newUser };\n}\n\nexport async function updateUserRole(userId: string, newRole: UserRole): Promise<{success: boolean, error?: string}> {\n  const userIndex = mockUsers.findIndex(u => u.id === userId);\n  if (userIndex === -1) {\n    return { success: false, error: \"User not found.\" };\n  }\n  mockUsers[userIndex].role = newRole;\n  console.log(`Updated role for user ${userId} to ${newRole}`);\n  return { success: true };\n}\n\nexport async function deleteUser(userId: string): Promise<{success: boolean, error?: string}> {\n   const userToDelete = mockUsers.find(u => u.id === userId);\n   if (!userToDelete) {\n     return { success: false, error: \"User not found.\" };\n   }\n\n   // Prevent deleting the last admin if it's the only admin\n    if (userToDelete.role === 'admin') {\n        const adminCount = mockUsers.filter(u => u.role === 'admin').length;\n        if (adminCount <= 1) {\n            return { success: false, error: \"Cannot delete the last admin user.\" };\n        }\n    }\n\n   const userIndex = mockUsers.findIndex(u => u.id === userId);\n   if (userIndex > -1) {\n     mockUsers.splice(userIndex, 1); // Modify the array in place\n     console.log(`Deleted user ${userId}`);\n     return { success: true };\n   } else {\n     // This case should ideally not be reached if userToDelete was found earlier by `find`.\n     console.error(`User ${userId} was found by 'find' but not by 'findIndex'. This indicates a potential data consistency issue in the mock data or logic.`);\n     return { success: false, error: \"Inconsistency: User found but could not be indexed for deletion.\" };\n   }\n}\n\nexport async function generateMonthlyReport(month: number, year: number) { \n  console.log(`Generating report for ${month}/${year}`); \n  // Simulate report generation\n  await new Promise(resolve => setTimeout(resolve, 1500));\n  const revenue = Math.random() * 10000 + 50000;\n  const costOfGoodsSold = revenue * (Math.random() * 0.3 + 0.4); // COGS between 40-70% of revenue\n  const operatingExpenses = Math.random() * 5000 + 10000;\n  const grossProfit = revenue - costOfGoodsSold;\n  const netIncome = grossProfit - operatingExpenses;\n\n  const report = {\n    id: `report_${year}_${String(month).padStart(2, '0')}`,\n    month,\n    year,\n    incomeStatementData: { revenue, costOfGoodsSold, grossProfit, operatingExpenses, netIncome },\n    generatedAt: new Date().toISOString(),\n    downloadUrl: `/api/reports/download?month=${month}&year=${year}` // Simulated\n  };\n  return { success: true, report }; \n}\n\n// Authentication (Simulated)\nexport async function loginAdmin(formData: FormData) { \n  const email = formData.get('email');\n  // In a real app, validate credentials against a database\n  if (email === 'admin@stockpilot.com') {\n    return { success: \"Login successful! Redirecting...\", redirect: \"/admin/dashboard\" }; \n  }\n  return { error: \"Invalid admin credentials.\" };\n}\n\nexport async function registerCustomer(formData: FormData) { \n  console.log(\"Registering customer:\", Object.fromEntries(formData.entries())); \n  // Simulate adding to mockCustomers or a database\n  return { success: \"Registration successful! Please login.\" , redirect: \"/login\"}; \n}\nexport async function loginCustomer(formData: FormData) { \n  console.log(\"Logging in customer:\", Object.fromEntries(formData.entries())); \n  return { success: \"Login successful! Redirecting...\", redirect: \"/products\" }; \n}\nexport async function updateProduct(productId: string, formData: FormData) { console.log(productId, formData); return { success: \"Not implemented\" }; }\nexport async function deleteProduct(productId: string) { console.log(productId); return { success: \"Not implemented\" }; }\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 983, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1097, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/sales/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/sales/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/sales/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 1111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/sales/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/sales/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/sales/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 1125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}